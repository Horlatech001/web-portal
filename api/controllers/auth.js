import { db } from "../connect.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

// Function to generate an application code
const generateApplicationCode = () => {
    // Your logic to generate a unique application code
    // Example: Generate a random 6-character alphanumeric code
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let code = '';
    for (let i = 0; i < 6; i++) {
        code += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return code;
};

export const register = (req, res) => {

    // Generate an application code
    const applicationCode = generateApplicationCode();
    
    // CHECK USER IF EXIST
    const q = "SELECT * FROM users WHERE email =?";

    db.query(q, [req.body.email], (err, data) => {
        if (err) return res.status(500).json(err);
        if (data.length) return res.status(409).json("User already exists!");

        // CREATE A NEW USER
        // Hash the password
        const salt = bcrypt.genSaltSync(10);
        const hashedPassword = bcrypt.hashSync(req.body.password, salt);

        const q =
            "INSERT INTO users (`firstName`,`middleName`,`lastName`,`position`,`email`, `phone`, `password`, `applicationCode` ) VALUE (?)";

        const values = [
            req.body.firstName,
            req.body.middleName,
            req.body.lastName,
            req.body.position,
            req.body.email,
            req.body.phone,
            hashedPassword,
            applicationCode // Use the generated application code
        ];

        db.query(q, [values], (err, data) => {
            if (err) return res.status(500).json(err);

            // Generate a JWT token with user ID as payload
            const userId = data.insertId; // Assuming your user ID is generated by the database
            const token = jwt.sign({ userId }, 'secretKey');
            return res.status(200).json({ token });

            
        });
    });
};
